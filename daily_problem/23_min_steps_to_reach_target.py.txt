#This problem was asked by Google.

#You are given an M by N matrix consisting of booleans that represents a board. Each True boolean represents a wall. Each False boolean #represents a tile you can walk on.
#
#Given this matrix, a start coordinate, and an end coordinate, return the minimum number of steps required to reach the end coordinate #from the start. If there is no possible path, then return null. You can move up, left, down, and right. You cannot move through walls. #You cannot wrap around the edges of the board.

#For example, given the following board:

#[[f, f, f, f],
#[t, t, f, t],
#[f, f, f, f],
#[f, f, f, f]]
#and start = (3, 0) (bottom left) and end = (0, 0) (top left), the minimum number of steps required to reach the end is 7, since we would #need to go through (1, 2) because there is a wall everywhere else on the second row.

M = [[False, False, False, False],
[True, True, False, True],
[False, False, False, False],
[False, False, False, False]]

start = (3, 0)
end = (0, 0)

# dfs
def solve(matrix, start, end):
	res = dfs(matrix, start, end, float("inf"), 0)
	return None if float("inf") == res else res

def dfs(matrix, start, end, res, curr):
	if start == end:
		res = min(res, curr)
		return res
	print(start)
	curr += 1
	x, y = start
	matrix[x][y] = True
	for temp_x, temp_y in [[1,0], [0,1], [-1, 0], [0, -1]]:
		next_x, next_y = x + temp_x, y + temp_y
		if -1 < next_x < len(matrix) and -1 < next_y < len(matrix[0]):
			if matrix[next_x][next_y]:
				continue
			res = min(res, dfs(matrix, (next_x, next_y), end, res, curr))
	matrix[x][y] = False
	return res
print(solve(M, start, end))
